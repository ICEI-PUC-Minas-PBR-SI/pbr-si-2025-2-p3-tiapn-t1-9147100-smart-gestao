// ============================================================
// üõ°Ô∏è Arquivo: scripts/initPermissions.js
// üéØ Fun√ß√£o: Cria e inicializa as permiss√µes padr√£o do sistema Smart Gest√£o
// ============================================================

import Permission from "../models/Permission.js"; // Importa o model de permiss√µes

/**
 * üîß Fun√ß√£o initPermissions()
 * ----------------------------------------
 * Respons√°vel por verificar se j√° existem permiss√µes cadastradas no banco.
 * Caso n√£o existam, insere automaticamente as permiss√µes padr√£o:
 *  - ROOT ‚Üí acesso total ao sistema
 *  - ADMIN_COMPANY ‚Üí administrador de uma empresa
 *  - USER_COMPANY ‚Üí usu√°rio comum vinculado √† empresa
 *  - READ_ONLY ‚Üí acesso apenas para leitura
 *
 * Essa fun√ß√£o √© executada no startup do servidor (server.js),
 * logo ap√≥s a conex√£o com o MongoDB ser estabelecida.
 */
export const initPermissions = async () => {
  try {
    console.log("üîç Verificando permiss√µes existentes...");

    // Conta quantos documentos existem na cole√ß√£o Permission
    const count = await Permission.countDocuments();

    // Se j√° houver permiss√µes cadastradas, n√£o cria novamente
    if (count > 0) {
      console.log("üîí Permiss√µes j√° existentes no banco. Nenhuma altera√ß√£o necess√°ria.");
      return;
    }

    // Define o conjunto padr√£o de permiss√µes do sistema
    const permissions = [
      {
        name: "ROOT",
        description: "Acesso total ao sistema (donos e administradores gerais do sistema).",
      },
      {
        name: "ADMIN_COMPANY",
        description: "Administrador da empresa. Pode gerenciar usu√°rios e dados da pr√≥pria empresa.",
      },
      {
        name: "USER_COMPANY",
        description: "Usu√°rio padr√£o da empresa, com acesso aos dados da pr√≥pria organiza√ß√£o.",
      },
      {
        name: "READ_ONLY",
        description: "Usu√°rio com acesso apenas de leitura. N√£o pode criar, editar ou excluir.",
      },
    ];

    // Insere os documentos no banco (cria√ß√£o em lote)
    await Permission.insertMany(permissions);

    console.log("‚úÖ Permiss√µes padr√£o criadas com sucesso!");
    console.table(permissions.map((p) => ({ Nome: p.name, Descri√ß√£o: p.description })));
  } catch (error) {
    // Captura e exibe erros durante o processo de inicializa√ß√£o
    console.error("‚ùå Erro ao inicializar permiss√µes padr√£o:");
    console.error(error.message);
  }
};
